version: 2.1

orbs:
  slack: circleci/slack@4.4.2

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}  
    steps:
      - run:
          name: Empty S3 Bucket
          when: on_fail
          command: |
            echo "Destroying environment:${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
      - run:
          name: Destroy Stacks
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: 5ac96d73-e853-4146-9e18-b99cac548fbf" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
              cd backend
              npm install
            #  Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install oauth-sign
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install oauth-sign
            npm run build

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end Test
          command: |
            cd frontend
            npm install oauth-sign
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end Test
          command: |
            cd backend
            npm install oauth-sign
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Audit Front-End Dependencies
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical
            # npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Audit Back-End Dependencies
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical
            # npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            yum install tar gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=backend-tag \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
            URLS=$(aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} --query "Reservations[*].Instances[*].PublicDnsName" --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            echo "URLS=$URLS" 
            curl -H "Content-Type: text/plain" -H "token: 5c64246e-cafb-4e5b-a96b-23b44084375c" --request PUT --data "$URLS" https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7}   
            
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=frontend-tag
      - run:
          name: Add back-end DNS name to ansible inventory
          command: |
            export backend_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt)
            cat ./.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failures 
  
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["71:95:f4:44:03:5a:14:78:08:45:93:7b:e7:9e:86:94"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible curl jq tar gzip ansible nodejs npm
            pip install awscli
      - run:
          name: Setup Inventory file
          command: |
            cd .circleci/ansible
            echo "[web]" >> inventory.txt
            URLS=$(curl -H "token: 5c64246e-cafb-4e5b-a96b-23b44084375c" --request GET https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7})
            echo $URLS >> inventory.txt
            cat inventory.txt
      - run:
          name: Configure server
          no_output_timeout: 30m
          command: |
            cd .circleci/ansible/
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Install Dependencies
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            sudo apt-get -qq install awscli
      - run:
          name: Adding .env data
          command: |
            touch backend/.env
            echo NODE_ENV=$ENVIRONMENT >> "backend/.env"
            echo VERSION=${CIRCLE_WORKFLOW_ID:0:7} >> "backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_ENTITIES=.$TYPEORM_ENTITIES >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cd backend
            cat .env
      - run:
          name: Run migrations
          command: |
            cd backend 
            npm install
            npm run build
            npm run migrations > migrations_log.txt
            cat migrations_log.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully" migrations_log.txt; then 
              curl -H "Content-Type: text/plain" -H "token: 5ac96d73-e853-4146-9e18-b99cac548fbf" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            else
              curl -H "Content-Type: text/plain" -H "token: 5ac96d73-e853-4146-9e18-b99cac548fbf" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
            RESULT=$(curl -H "token: 5ac96d73-e853-4146-9e18-b99cac548fbf" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo "${RESULT}" 
     # Here's where you will add some code to rollback on failure    
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash - #
            yum -y install tar gzip nodejs

      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: 5c64246e-cafb-4e5b-a96b-23b44084375c" --request GET https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7})
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # attach workspace
      - attach_workspace:
          at: ~/
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["71:95:f4:44:03:5a:14:78:08:45:93:7b:e7:9e:86:94"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible nodejs npm jq curl gzip tar
            apk add --no-cache openssh-client
            apk add --no-cache --upgrade bash
            pip install awscli
      - run:
          name: Setup Inventory file
          command: |
            cd .circleci/ansible
            echo "[web]" >> inventory.txt
            URLS=$(curl -H "token: 5c64246e-cafb-4e5b-a96b-23b44084375c" --request GET https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7})
            echo $URLS >> inventory.txt
            cat inventory.txt
      - run:
          name: Adding .env data
          command: |
            touch backend/.env
            echo NODE_ENV=$ENVIRONMENT >> "backend/.env"
            echo VERSION=${CIRCLE_WORKFLOW_ID:0:7} >> "backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_ENTITIES=.$TYPEORM_ENTITIES >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cd backend
            cat .env

      - run:
          name: Compress Backend
          command: |
            tar -C backend -czvf artifact.tar.gz .
            ls -la
      - run:
          name: Deploy backend
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml

      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl jq curl nodejs npm
            pip install awscli
      - run:
          name: Backend Smoke Test
          command: |
            BACKEND_URL=$(aws ec2 describe-instances \
                  --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --query 'Reservations[*].Instances[*].PublicDnsName' \
                  --output text)
            echo ${BACKEND_URL}
            export ENDPOINT_URL="http://$BACKEND_URL:3030/api/status"
            echo $ENDPOINT_URL
            curl $ENDPOINT_URL
            if curl -s ${ENDPOINT_URL} | grep "ok"
            then
              echo "Success"
              exit 0
            else
              echo "Failed"
              exit 1
            fi  
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"
            echo ${FRONTEND_URL}
            if curl -s ${FRONTEND_URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Retrieve previous stack workflow ID 
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --region us-east-1 --no-paginate --output text >> ./.circleci/previousworkflowid.txt
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation \
            update-stack --use-previous-template --stack-name udapeople-cloudfront \
            --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7},UsePreviousValue=false
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/previousworkflowid.txt  

      # Here's where you will add some code to rollback on failure
                             

workflows:
  default:
    jobs:
      - build-frontend:
          context: 
            - slack-secrets
      - build-backend
      - test-frontend:
         requires: [build-frontend]
      - test-backend:
         requires: [build-backend]
      - scan-backend:
         requires: [build-backend]
      - scan-frontend:
         requires: [build-frontend]
      - deploy-infrastructure:
         requires: [test-frontend, test-backend, scan-frontend, scan-backend]
        #  requires: [build-frontend, build-backend]
         filters:
           branches:
             only: master
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]